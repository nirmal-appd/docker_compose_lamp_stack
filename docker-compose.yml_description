//The Docker Compose Version
version: '3'

//This is a list of the services (containers) that you will be using to run whatever application you have written.
//Let's say you are writing a simple php web app with a database. Then these are the containers that you would use
services:

//This is the name of one of your first container. You can name it whatever you want. 
//You will want to name this something memorable as you will use this name to access the box for SSH or other network activity
  devbox:
  
//This is the build section of the Docker Compose file. This is where the docker-compose program will look if you use it's build
//command.
//Example: docker-compose build
    build:
    
//Context is the location of where your DockerFile resides on your local machine you are building the image from.
//In our example of this blog post, it would be referring to one of the DockerFile examples that was posted earlier.
      context: ./
      
//dockerfile is used if you are not using the default name of a docker file (which is just DockerFile).
//This comes in handy when you have multiple DockerFiles that you need to use in your application.
//In this example, we are using the filename DevBox.DockerFile. You can name the file whatever you want.
      dockerfile: DevBox.DockerFile
      
//Ports are used when you want to publish ports and allow them to be accessed by computers or services outside
//of the docker network. Since we are working on a LAMP stack that we want to access from a browser, we opened ports
//80 & 443 for http and https access.
    ports:
      - "80:80"
      - "443:443"

//Volumes are how you mount your local filesystem to the filesystem inside your container. Works the same way as SMB works
//Except a lot easier. The syntax is shown in the example below
    volumes:
      - /path/of/my/local/filesystem:/path/to/mount/into/containers/filesystem
      
//This is the start of the second container we have. The first was for our Apache/PHP container.
//This one below is for the MySQL container that we need for running our database. 
//Notice how some of the properties of this entry is the same as the other one, like the build statement and the ports.
  devmysql:
    build:
      context: ./
      dockerfile: MySQLDev.DockerFile
    ports:
      - "3306:3306"
      
//This environment section allows you to set environment variables within the container      
    environment:
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_ALLOW_EMPTY_PASSWORD : 'yes'
      
//Restart can be set so if your container fails for some reason and exits, that the container will try and reboot itself.      
    restart: always
    volumes:
            - /database/path/of/my/local/filesystem:/database/path/to/mount/into/containers/filesystem